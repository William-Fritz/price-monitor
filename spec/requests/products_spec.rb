 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/products", type: :request do
  # Product. As you add validations to Product, be sure to
  # adjust the attributes here as well.
  let(:post_params) { {
    url:'https://fabelio.com/ip/set-meja-makan-2-kursi-eton-square-eton-blue-jay.html'
  } }
  
  let(:valid_attributes) { {
    name: 'example',
    current_price: 10000,
    url: 'http://moreexample.com/'
  } }

  describe "GET /index" do
    it "renders a successful response" do
      product = create(:product)
      get products_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      product = create(:product)
      get product_url(product)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_product_url
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Product" do
        expect {
          post products_url, params: { product: post_params}
        }.to change(Product, :count).by(1)
      end

      it "redirects to the created product" do
        post products_url, params: { product: post_params }
        expect(response).to redirect_to(product_url(Product.last))
      end
    end
  end
end

